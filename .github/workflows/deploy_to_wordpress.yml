name: Deploy to WordPress.org

on:
  release:
    types: [published]  # opzionale: parte quando pubblichi una GitHub Release
  workflow_dispatch:          # avvio manuale dal tab Actions
jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest

    env:
      SLUG: cityevents          # <-- slug del plugin su wp.org (uguale all’URL SVN)
      BUILD_DIR: build                 # cartella temporanea di build
      PHP_VERSION: '8.3'
      SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
      SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}

    steps:
      - name: Check required secrets
        run: |
          [ -n "${{ secrets.SVN_USERNAME }}" ] || { echo "Missing secret: SVN_USERNAME"; exit 1; }
          [ -n "${{ secrets.SVN_PASSWORD }}" ] || { echo "Missing secret: SVN_PASSWORD"; exit 1; }
    
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from tag
        id: getver
        run: |
          REF="${GITHUB_REF##*/}"          # es. v1.0.0
          VER="${REF#v}"                   # es. 1.0.0
          echo "version=${VER}" >> $GITHUB_OUTPUT

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: none
          tools: composer

      - name: Install Composer deps (no dev)
        run: composer install --no-dev --prefer-dist --optimize-autoloader

      # Se usi npm/webpack per assets, aggiungi qui build frontend (npm ci && npm run build)
      # - name: Build assets
      #   run: |
      #     npm ci
      #     npm run build

      - name: Prepare build dir
        run: |
          rm -rf .deploy
          mkdir -p .deploy
          rsync -av --delete \
            --exclude-from=".distignore" \
            ./ ./deploy/

      # Verifica version matching (opzionale ma utile)
      - name: Check plugin version matches tag
        run: |
          FILE=$(grep -rl "Plugin Name:" "${BUILD_DIR}/${SLUG}" | head -n1)
          if [ -z "$FILE" ]; then
            echo "Impossible trovare il file principale del plugin"; exit 1;
          fi
          # Estrae "Version: x.y.z" dall'header
          PLUGIN_VER=$(php -r '
            $f=$argv[1];
            $s=file_get_contents($f);
            if(preg_match("/^\\s*\\*\\s*Version:\\s*(.+)$/mi",$s,$m)){echo trim($m[1]);}else{exit(1);}
          ' "$FILE")
          echo "Plugin header version: $PLUGIN_VER"
          echo "Git tag version: ${{ steps.getver.outputs.version }}"
          [ "$PLUGIN_VER" = "${{ steps.getver.outputs.version }}" ] || { echo "Version mismatch"; exit 1; }

      - name: WordPress plugin deploy
        uses: 10up/action-wordpress-plugin-deploy@stable
        env:
          SLUG: cityevents          # <-- slug del plugin su wp.org (uguale all’URL SVN)
          SOURCE_DIR: .deploy                 # cartella temporanea di build
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}

        with:
          generate-zip: true   # opzionale
          dry-run: false       # metti true per test senza pubblicare
